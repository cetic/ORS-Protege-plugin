package ${package}.rs;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.ws.rs.Consumes;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.GenericEntity;
import ${package}.manager.StorageManager;
import ${package}.model.SerializerManager;
import ${package}.pojo.${pojoName};
import ${package}.${interfaceName};
import be.cetic.ors.ontologybinding.generic.exception.BadRequestException;
import be.cetic.ors.ontologybinding.generic.exception.ClassURIException;
import be.cetic.ors.ontologybinding.generic.exception.SerializationAnalysisException;


/**
 * Generated class.
 */
@Path("/resource/${interfaceName}")
public class Rest${interfaceName} {
    public static java.util.logging.Logger logger = java.util.logging.Logger.getLogger("Rest${interfaceName}");

    @Path("/")
    @POST
    @Consumes("application/json")
    public javax.ws.rs.core.Response register${interfaceName}(${interfaceName}Pojo pojo,
    @QueryParam("uri")
    @DefaultValue("")
    String uri) {
        try {
            StorageManager storageManager = new StorageManager(uri);
            storageManager.setReplaceMode(false);
            String identifiant = storageManager.rdfStore${interfaceName}(/*uri,*/ pojo);
            return javax.ws.rs.core.Response.created(new URI(identifiant)).build();
        } catch (final IOException e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        } catch (final URISyntaxException e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        } /*catch (final BadRequestException e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        }*/ catch (final SerializationAnalysisException e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        } catch (final ClassURIException e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        } catch (final Exception e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        }
    }

    @Path("/")
    @PUT
    @Consumes("application/json")
    public javax.ws.rs.core.Response edit${interfaceName}(${interfaceName}Pojo pojo,
    @QueryParam("uri")
    @DefaultValue("")
    String uri) {
        try {
            StorageManager storageManager = new StorageManager(uri);
            storageManager.setReplaceMode(true);
            String identifiant = storageManager.rdfStore${interfaceName}(/*uri,*/ pojo);
            return javax.ws.rs.core.Response.created(new URI(identifiant)).build();
        } catch (final IOException e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        } catch (final URISyntaxException e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        } /*catch (final BadRequestException e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        }*/ catch (final SerializationAnalysisException e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        } catch (final ClassURIException e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        } catch (final Exception e) {
            logger.log(Level.WARNING, "Error", e);
            return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
        }
    }


    @Path("/")
    @GET
    @Consumes("application/json")
    public javax.ws.rs.core.Response get${interfaceName}s( 
        @QueryParam("uri")
        @DefaultValue("")
        String uri,
        @QueryParam("id")
        String id) {
         try {
             //StorageManager storageManager = new StorageManager(uri);
             //ArrayList<${package}.${interfaceName}> entityList = storageManager.rdfRetrieve${interfaceName}s(/*uri,*/ id);
             SerializerManager serializerManager = new SerializerManager(uri);
             ArrayList<${package}.${interfaceName}> entityList= serializerManager.${interfaceName}ToModel(id);
             GenericEntity<ArrayList<${package}.${interfaceName}>>generic = new GenericEntity<ArrayList<${package}.${interfaceName}>>(entityList) {
             }
             ;
             return javax.ws.rs.core.Response.ok(generic, "application/json").build();
         } catch (final IOException e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         } catch (final URISyntaxException e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         } catch (final BadRequestException e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         } catch (final SerializationAnalysisException e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         } catch (final ClassURIException e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         } catch (final Exception e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         }
     }

    @DELETE
    @Path("/")
    public javax.ws.rs.core.Response delete${interfaceName}(
             @QueryParam("uri")
             @DefaultValue("")
             String uri,
             @QueryParam("id")
             String id) {
         try{
             StorageManager storageManager = new StorageManager(uri);
             storageManager.delete${interfaceName}(id);
              return javax.ws.rs.core.Response.ok().build();
         } catch (final IOException e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         } /*catch (final URISyntaxException e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         }*/
         /* catch (final BadRequestException e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         } catch (final SerializationAnalysisException e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         } catch (final ClassURIException e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         }*/ catch (final Exception e) {
             logger.log(Level.WARNING, "Error", e);
             return javax.ws.rs.core.Response.status(javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()). build();
         }
     }


